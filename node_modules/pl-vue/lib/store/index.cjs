'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactivity = require('../reactivity/index.cjs');
var utils = require('../utils/index.cjs');

const actionFlag = Symbol('action');
function isAction(func) {
  return utils.isFunction(func) && func.prototype[actionFlag] === actionFlag;
}
class Stroe {
  state;
  actions = {};
  constructor(state, actions) {
    this.state = reactivity.reactive(utils.deepClone(state));
    // 包装每个 actions
    for (const key in actions) {
      const self = this;
      function func(...args) {
        const result = actions[key].bind(state)(...args);
        if (utils.isType(result) === 'Promise') {
          return result.then(res => {
            self._merge(state);
            return res;
          });
        } else {
          self._merge(state);
          return result;
        }
      }
      func.prototype[actionFlag] = actionFlag;
      self.actions[key] = func;
    }
    // 合并对象
    Object.assign(this.state, this.actions); // 将 actions 塞到 state 中
    for (const key in this.actions) {
      Object.defineProperty(this.state, key, {
        writable: false // actions 不可被重写
      });
    }
  }
  /**
   * 合并 state 数据
   * @param state
   */
  _merge(state) {
    const newState = utils.deepClone(state);
    const targetKsys = Object.keys(newState);
    // 只对 newState 数据做更改
    for (const prop in newState) {
      this.state[prop] = newState[prop];
    }
    for (const key in this.state) {
      if (isAction(this.state[key])) continue;
      !targetKsys.includes(key) && delete this.state[key];
    }
  }
}
const states = {};
const collectMap = new utils.CustomWeakMap();
/**
 * 定义 Store
 * @param state
 * @param actions
 * @returns
 */
function defineStore(option) {
  const {
    id,
    state,
    actions
  } = option;
  return () => {
    if (!collectMap.has(state)) {
      if (id) states[id] = state; // 收集数据
      const s = new Stroe(state, actions);
      collectMap.set(state, s.state);
    }
    return collectMap.get(state);
  };
}

function createStore() {
  return {
    install(app) {
      app.$store = {
        state: states
      };
    }
  };
}

exports.createStore = createStore;
exports.defineStore = defineStore;
