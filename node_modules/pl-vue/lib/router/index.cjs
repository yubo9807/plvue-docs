'use strict';

var reactivity = require('../reactivity/index.cjs');
var utils = require('../utils/index.cjs');
var vdom = require('../vdom/index.cjs');

/**
 * 获取 url query
 * @param url
 * @returns
 */
function parseQuery(url) {
  const query = {};
  url.replace(/([^?&=]+)=([^&]+)/g, (_, k, v) => query[k] = v);
  return query;
}
/**
 * 根据 url 解析 route
 * @param url
 * @returns
 */
function analyzeRoute(url) {
  const newUrl = new URL('http://0.0.0.0' + url);
  return {
    fullPath: newUrl.href.replace(newUrl.origin, ''),
    path: newUrl.pathname,
    query: parseQuery(newUrl.search),
    hash: newUrl.hash,
    meta: {}
  };
}
/**
 * 组织 url
 * @param option
 * @returns
 */
function splicingUrl(option) {
  let search = '';
  for (const key in option.query) {
    if (option.query[key]) {
      search += `${key}=${option.query[key]}&`;
    }
  }
  search = search ? '?' + search.slice(0, -1) : '';
  let hash = option.hash ? '#' + option.hash : '';
  return option.path + search + hash;
}
/**
 * 格式化 url，删除重复的 /
 * @param url
 * @returns
 */
function formatUrl(url) {
  return url.replace(/\/{1,}/g, '/');
}

/**
 * 切换路由
 * @param option
 * @param type 切换类型
 */
function toggle(option, type) {
  if (utils.isString(option)) {
    if (config.mode === 'history') {
      option = config.base + option;
    }
    option = analyzeRoute(option);
  }
  for (const key in option) {
    currentRoute[key] = option[key];
  }
  const {
    fullPath
  } = currentRoute;
  if (!utils.isBrowser()) return;
  if (config.mode === 'history') {
    history[type === 'push' ? 'pushState' : 'replaceState']({}, '', fullPath);
  } else {
    location.hash = fullPath;
  }
}
/**
 * 向前 push 一个路由
 * @param option
 */
function push(option) {
  toggle(option, 'push');
}
/**
 * 替换当前路由
 * @param option
 */
function replace(option) {
  toggle(option, 'replace');
}
/**
 * 向前/后改变路由
 * @param num
 */
function go(num) {
  history.go(num);
}
/**
 * router method
 * @returns
 */
function useRouter() {
  return {
    back: () => go(-1),
    forward: () => go(1),
    go,
    push,
    replace,
    options: config,
    currentRoute: reactivity.toRaw(currentRoute)
  };
}
/**
 * 当前 route 信息
 * @returns
 */
function useRoute() {
  return currentRoute;
}

const config = {
  base: '',
  mode: 'history',
  ssrDataKey: 'g_initialProps'
};
let currentRoute = null;
function setCurrentRoute(route) {
  currentRoute = route;
}
/**
 * 获取浏览器 url
 * @returns
 */
function getBrowserUrl() {
  const {
    origin,
    href,
    hash
  } = location;
  if (config.mode === 'hash') {
    return hash.replace('#', '');
  }
  return href.replace(origin + config.base, '');
}
let beforeEach = null;
/**
 * 初始化路由
 * @param option
 * @returns
 */
function initRouter(option = {}) {
  Object.assign(config, option);
  if (utils.isBrowser()) {
    const route = analyzeRoute(getBrowserUrl());
    currentRoute = reactivity.reactive(route);
    window.addEventListener('popstate', () => {
      const route = analyzeRoute(getBrowserUrl());
      for (const key in route) {
        currentRoute[key] = route[key];
      }
    });
  }
  return {
    ...useRouter(),
    beforeEach(func) {
      beforeEach = func;
    }
  };
}
// 服务端临时变量
const variable = {
  currentTemplate: '',
  ssrData: {}
};

function Route(props) {}
/**
 * 查找路由
 * @param routes
 * @param pathname
 * @returns
 */
function queryRoute(routes, pathname) {
  pathname = pathname.replace(config.base, '');
  const query = routes.find(val => {
    const {
      path,
      exact
    } = val.attrs;
    if (exact === false) {
      return (pathname + '/').startsWith(formatUrl(path + '/'));
    }
    return formatUrl(path) === pathname;
  });
  if (!query) return;
  const {
    path,
    component,
    beforeEnter,
    meta,
    redirect
  } = query.attrs;
  return {
    path: formatUrl(path),
    component,
    meta,
    beforeEnter,
    redirect
  };
}

let backupRoute = void 0; // 旧的 route 信息
const unwatchs = []; // 收集子路由的取消监听事件
function BrowserRouter(props) {
  const Comp = reactivity.ref();
  let attrs = {};
  function routeChange(path) {
    const query = queryRoute(props.children, path);
    if (!query) {
      attrs = {};
      Comp.value = props.notFound;
      return;
    }
    /**
     * 渲染组件
     */
    async function next() {
      // 按需加载组件
      if (!query.component.prototype) {
        query.component = (await query.component()).default;
      }
      // 组件没有发生变化
      if (Comp.value === query.component) return;
      attrs.path = query.path;
      const getInitialProps = isExistGetInitialProps(query.component);
      if (getInitialProps) {
        const ssrData = window[config.ssrDataKey];
        if (ssrData && attrs.path in ssrData) {
          attrs.data = ssrData[attrs.path];
          delete ssrData[attrs.path];
        } else {
          attrs.data = await getInitialProps(utils.deepClone(attrs));
        }
      }
      Comp.value = query.component;
      attrs.meta = query.meta;
      currentRoute.meta = query.meta;
    }
    // 重定向
    if (query.redirect && query.redirect !== currentRoute.fullPath) {
      replace(query.redirect);
      routeChange(currentRoute.path);
      return;
    }
    function protect(func) {
      func(reactivity.toRaw(currentRoute), backupRoute, () => {
        backupRoute = utils.deepClone(currentRoute);
        path === currentRoute.path ? next() : routeChange(currentRoute.path);
      });
    }
    // 全局守卫
    if (beforeEach) {
      protect(beforeEach);
      return;
    }
    // 独享守卫
    if (query.beforeEnter) {
      protect(query.beforeEnter);
      return;
    }
    backupRoute = utils.deepClone(currentRoute);
    next();
  }
  const unwatch = reactivity.watch(() => currentRoute.path, value => {
    // 父级组件卸载的时候，需要把嵌套路由的监听器全部取消掉（这里存在性能问题）
    if (backupRoute) {
      const arr1 = backupRoute.path.split('/'),
        arr2 = value.split('/');
      if (arr1[1] !== arr2[1]) {
        utils.customForEach(unwatchs, unwatch => unwatch());
      }
    }
    routeChange(value);
  }, {
    immediate: true
  });
  props.prefix && unwatchs.push(unwatch);
  return vdom.h(vdom.Fragment, null, () => vdom.h(Comp.value, {
    ...attrs
  }));
}
const stack = reactivity.reactive([]); // 执行栈
function deleteStackItem(id) {
  const index = stack.indexOf(id);
  stack.splice(index, 1);
}
let repalceComp = null;
function StaticRouter(props) {
  function routerChange(path) {
    let query = queryRoute(props.children, path);
    // 重定向
    if (query.redirect && query.redirect !== currentRoute.fullPath) {
      setCurrentRoute(analyzeRoute(query.redirect));
      return routerChange(currentRoute.path);
    }
    function protect(func) {
      repalceComp = `b_${utils.createId()}`;
      stack.push(repalceComp);
      func(reactivity.toRaw(currentRoute), backupRoute, () => {
        backupRoute = utils.deepClone(currentRoute);
        if (query.path !== currentRoute.path) {
          StaticRouter(props);
        } else {
          resultReplace(repalceComp, query.component, {
            path: query.path,
            meta: query.meta
          });
          deleteStackItem(repalceComp);
        }
      });
      return repalceComp;
    }
    // 全局守卫
    if (beforeEach) return protect(beforeEach);
    // 独享守卫
    if (query.beforeEnter) return protect(query.beforeEnter);
    return query;
  }
  let query = routerChange(currentRoute.path);
  if (utils.isString(query)) {
    return vdom.h(vdom.Fragment, null, query);
  }
  if (!query) {
    const Comp = props.notFound;
    return Comp ? vdom.h(Comp, null) : vdom.h(vdom.Fragment, null);
  }
  query = query;
  let Comp = query.component;
  currentRoute.meta = query.meta;
  const attrs = {
    path: query.path,
    meta: query.meta
  };
  if (repalceComp) {
    resultReplace(repalceComp, Comp, attrs);
    deleteStackItem(repalceComp);
  }
  const replaceStr = `r_${utils.createId()}`;
  // 如果是异步组件
  if (!Comp.prototype) {
    stack.push(replaceStr);
    Comp().then(async res => {
      Comp = res.default;
      // 存在 getInitialProps
      const getInitialProps = isExistGetInitialProps(Comp);
      if (getInitialProps) {
        attrs.data = await getInitialProps(utils.deepClone(attrs));
        variable.ssrData[attrs.path] = attrs.data;
      }
      // 替换结果
      resultReplace(replaceStr, Comp, attrs);
    });
    return vdom.h(vdom.Fragment, null, replaceStr);
  }
  // 存在 getInitialProps
  const getInitialProps = isExistGetInitialProps(Comp);
  if (getInitialProps) {
    stack.push(replaceStr);
    getInitialProps(utils.deepClone(attrs)).then(res => {
      attrs.data = res;
      variable.ssrData[attrs.path] = res;
      // 替换结果
      resultReplace(replaceStr, Comp, attrs);
    });
    return vdom.h(vdom.Fragment, null, replaceStr);
  }
  return vdom.h(Comp, {
    ...attrs
  });
}
/**
 * BrowserRouter & StaticRouter
 * @param props
 * @returns
 */
function Router(props) {
  utils.customForEach(props.children, val => {
    if (props.prefix) {
      val.attrs.path = formatUrl(props.prefix + val.attrs.path);
    }
    val.children = [val.attrs.component];
  });
  return utils.isBrowser() ? vdom.h(BrowserRouter, {
    ...props
  }) : vdom.h(StaticRouter, {
    ...props
  });
}
/**
 * 结果替换
 * @param replaceStr
 * @param Comp
 * @param attrs
 */
function resultReplace(replaceStr, Comp, attrs) {
  const string = vdom.renderToString(vdom.h(Comp, {
    ...attrs
  }));
  deleteStackItem(replaceStr);
  const newTemplate = variable.currentTemplate.replace(replaceStr, string);
  variable.currentTemplate = newTemplate;
}
/**
 * 是否存在 getInitialProps 属性并且能运行
 * @param Comp
 * @returns 如果能运行返回 getInitialProps 本身
 */
function isExistGetInitialProps(Comp) {
  const {
    getInitialProps
  } = Comp.prototype;
  if (getInitialProps && utils.isFunction(getInitialProps)) {
    return getInitialProps;
  }
}

function Link(props) {
  const {
    to,
    type,
    className,
    children,
    ...args
  } = props;
  const route = useRoute();
  if (!utils.isString(to)) {
    props.to = splicingUrl(Object.assign({}, route, to));
  }
  const href = config.mode === 'hash' ? `${config.base}#${props.to}` : config.base + props.to;
  function jump(e) {
    e.preventDefault();
    if (type === 'replace') {
      replace(props.to);
    } else {
      push(props.to);
    }
  }
  return vdom.h("a", {
    className: () => {
      const currentPath = props.to + '/';
      const routePath = route.path + '/';
      return [routePath.startsWith(currentPath) && 'active', routePath === currentPath && 'exact-active', className];
    },
    href: href,
    onclick: jump,
    ...args
  }, children);
}

function Helmet(props) {
  const regs = [];
  utils.customForEach(props.children, tree => {
    if (tree.tag === 'title') {
      regs.push(new RegExp('<title'));
    } else if (tree.tag === 'meta' && tree.attrs.name) {
      regs.push(new RegExp(`<meta name=("|')?${tree.attrs.name}`));
    }
  });
  // 服务端
  if (variable.currentTemplate) {
    const matched = variable.currentTemplate.match(/\<head\>(.*)\<\/head>/s);
    const headInnerHTML = matched[1].trim();
    const nodes = headInnerHTML.split('\n').filter(val => val.includes('<'));
    for (let i = 0; i < utils.len(nodes); i++) {
      nodes[i] = nodes[i].trim();
      for (let j = 0; j < utils.len(regs); j++) {
        if (regs[j].test(nodes[i])) {
          nodes[i] = '';
        }
      }
    }
    utils.customForEach(props.children, val => {
      const html = vdom.createHTML(val.tag, val.attrs, val.children);
      nodes.push(html);
    });
    const newHeadInnerHTML = nodes.filter(val => val).join('\n');
    variable.currentTemplate = variable.currentTemplate.replace(/\<head\>.*\<\/head>/s, `<head>\n${newHeadInnerHTML}\n</head>`);
  }

  // 恢复原先的节点

  // #endregion
  return vdom.h(vdom.Fragment, null);
}
/**
 * 生成 SSR 页面
 * @param App      根组件
 * @param url      req.url
 * @param template html 模版
 * @returns
 */
async function ssrOutlet(App, url, template) {
  return new Promise(resolve => {
    url = url.replace(config.base, '');
    if (config.mode === 'hash') {
      const matchd = url.match(/#(.*)/);
      url = matchd ? matchd[1] : '';
    }
    setCurrentRoute(analyzeRoute(url));
    variable.ssrData = {};
    const content = vdom.renderToString(vdom.h(App, null));
    variable.currentTemplate = template.replace('<!--ssr-outlet-->', content);
    const unWatch = reactivity.watch(() => utils.len(stack), value => {
      if (value === 0) {
        const newTemplate = variable.currentTemplate;
        const index = newTemplate.search('</body>');
        const script = utils.len(Object.keys(variable.ssrData)) > 0 ? `<script>window.${config.ssrDataKey}=${JSON.stringify(variable.ssrData)}</script>` : '';
        variable.currentTemplate = newTemplate.slice(0, index) + script + newTemplate.slice(index, utils.len(newTemplate));
        resolve(variable.currentTemplate);
        unWatch();
      }
    }, {
      immediate: true
    });
  });
}

exports.Helmet = Helmet;
exports.Link = Link;
exports.Route = Route;
exports.Router = Router;
exports.initRouter = initRouter;
exports.ssrOutlet = ssrOutlet;
exports.useRoute = useRoute;
exports.useRouter = useRouter;
