'use strict';

var utils = require('../utils/index.cjs');
var reactivity = require('../reactivity/index.cjs');

/**
 * 可以直接赋值给 dom 节点
 * @param value
 * @returns
 */
function isAssignmentValueToNode(value) {
  return ['string', 'number'].includes(typeof value) && value !== '';
}
/**
 * 可进行响应式改变的属性
 * @param attr
 */
function isReactiveChangeAttr(attr) {
  return !/^on/.test(attr);
}
/**
 * 是否为一个虚拟 dom 对象
 * @param o
 * @returns
 */
function isVirtualDomObject(o) {
  return utils.isObject(o) && (utils.isString(o.tag) || isFragment(o.tag));
}
/**
 * 是否为一个组件
 * @param o
 * @returns
 */
function isComponent(tag) {
  return utils.isFunction(tag) && !isFragment(tag);
}
/**
 * 是否为一个类声明组件
 * @param o
 * @returns
 */
function isClassComponent(comp) {
  return utils.isClass(comp) && comp.prototype && comp.prototype.render;
}
/**
 * 不进行渲染的值
 * @param value
 * @returns
 */
function noRenderValue(value) {
  return [void 0, null, '', true, false].includes(value);
}
/**
 * 连接 class
 * @param args 剩余参数，类名
 * @returns
 */
function joinClass(...args) {
  const arr = args.filter(val => isAssignmentValueToNode(val));
  return arr.join(' ').trim().replace(/\s+/, ' ');
}
// #region 减少打包代码体积
/**
 * 创建文本节点
 * @param text
 * @returns
 */
function createTextNode(text) {
  return document.createTextNode(text);
}
function appendChild(dom, child) {
  dom.appendChild(child);
}
// #endregion

function h(tag, attrs, ...children) {
  const tree = {
    tag,
    attrs: attrs || {},
    children
  };
  // 对组件做一些处理
  if (isComponent(tree.tag)) {
    // 高阶组件 props 传递
    if (utils.len(tree.children) === 0 && tree.attrs.children) {
      tree.children = tree.attrs.children;
    }
  }
  return tree;
}
function Fragment({
  children
}) {
  return children;
}
const FragmentMark = Symbol('Fragment');
Fragment.prototype[FragmentMark] = FragmentMark;
/**
 * 是否是一个片段节点
 * @param tag
 * @returns
 */
function isFragment(tag) {
  // @ts-ignore
  return utils.isFunction(tag) && tag.prototype && tag.prototype[FragmentMark] === FragmentMark;
}

const compTreeMap = new WeakMap();
/**
 * 过滤掉元素，对组件进行收集
 * @param children
 * @param collect  递归参数，无需传递
 * @returns
 */
function filterElement(children, collect = []) {
  utils.customForEach(children, tree => {
    if (!utils.isObject(tree)) return;
    if (isComponent(tree.tag)) {
      collect.push({
        comp: tree.tag,
        props: utils.objectAssign(tree.attrs, {
          children
        })
      });
      utils.customForEach(tree.children, val => {
        if (isComponent(val)) {
          collect.push({
            comp: val,
            props: {}
          });
        }
      });
    } else if (isAssignmentValueToNode(tree.tag)) {
      filterElement(tree.children, collect);
    }
  });
  return collect;
}
/**
 * 获取一个组件下所有的子组件
 * @param comp    组件
 * @param collect 递归参数，无需传递
 * @returns
 */
function getSubComponent(comp, collect = []) {
  const arr = compTreeMap.get(comp) || [];
  collect.push(...arr);
  utils.customForEach(arr, val => {
    const arr = getSubComponent(val.comp);
    collect.push(...arr);
  });
  return collect;
}

let currentExportData = null;
/**
 * 收集组件导出数据
 * @param comp
 * @param attrs
 * @param children
 */
function collectExportsData(comp, attrs) {
  if ('ref' in attrs) {
    attrs.ref.value = currentExportData;
  }
  currentExportData = null;
}

const map$1 = new WeakMap();
/**
 * 执行对应的 onBeforeUnmount 钩子
 * @param comp 组件名
 */
function triggerBeforeUnmount(comp) {
  const keys = getSubComponent(comp).map(val => val.comp);
  keys.unshift(comp);
  const funcs = [];
  utils.customForEach(keys, key => {
    const arr = map$1.get(key) || [];
    funcs.push(...arr);
    map$1.delete(key);
  });
  utils.customForEach(funcs, func => func());
}

const map = new WeakMap();
/**
 * 执行对应的 onUnmounted 钩子
 * @param comp 组件名
 */
function triggerUnmounted(comp) {
  const keys = getSubComponent(comp).map(val => val.comp);
  keys.unshift(comp);
  const funcs = [];
  utils.customForEach(keys, key => {
    const arr = map.get(key) || [];
    funcs.push(...arr);
    map.delete(key);
  });
  utils.customForEach(funcs, func => func());
}

/**
 * 创建元素
 * @param tag
 * @param attrs
 * @param children
 * @returns
 */
function createElement(tag, attrs, children) {
  if (utils.isString(tag)) {
    // 节点
    return createElementReal(tag, attrs, children);
  }
  if (utils.isFunction(tag)) {
    tag = tag;
    // 节点片段
    if (isFragment(tag)) {
      return createElementFragment(children);
    }
    // 类组件
    if (isClassComponent(tag)) {
      // @ts-ignore
      const t = new tag({
        ...attrs,
        children
      });
      tag = t.render.bind(t);
    }
    // 组件
    tag = tag;
    const props = utils.objectAssign(attrs, {
      children
    });
    const tree = tag(props);
    collectExportsData(tag, attrs);
    if (isAssignmentValueToNode(tree)) {
      // 可能直接返回字符串数字
      return createTextNode(tree);
    }
    compTreeMap.set(tag, filterElement([tree, ...tree.children])); // 收集组件
    return createElement(tree.tag, tree.attrs, tree.children);
  }
}
/**
 * 创建真实节点
 * @param tag
 * @param attrs
 * @param children
 * @returns
 */
function createElementReal(tag, attrs = {}, children = ['']) {
  if (utils.isFunction(tag) && isFragment(tag)) {
    return createElement(tag, attrs, children);
  }
  const el = document.createElement(tag);
  utils.customForEach(children, val => {
    if (utils.isFunction(val)) {
      const fragment = createElementFragment([val]);
      appendChild(el, fragment); // 响应式数据交给节点片段去处理
    } else {
      nodeMount(el, val);
    }
  });
  // attrs 赋值
  for (const attr in attrs) {
    attrAssign(el, attr, attrs[attr]);
  }
  // 对样式单独处理
  if (attrs.style && utils.isObject(attrs.style)) {
    for (const prop in attrs.style) {
      const value = attrs.style[prop];
      if (utils.isFunction(value)) {
        reactivity.binding(() => el.style[prop] = value());
      } else {
        el.style[prop] = value;
      }
    }
  }
  return el;
}
/**
 * 属性赋值
 * @param el
 * @param attr
 * @param value
 */
function attrAssign(el, attr, value) {
  // 自定义属性
  if (attr === 'ref' && utils.isObject(value)) {
    value.value = el;
    return;
  }
  if (attr === 'created' && utils.isFunction(value)) {
    value(el);
    return;
  }
  // 一般属性赋值
  let assgin = val => el[attr] = val;
  // 特殊属性处理
  if (attr === 'className') {
    assgin = val => el[attr] = joinClass(...[val].flat());
  } else if (attr.startsWith('data-')) {
    assgin = val => el.dataset[attr.slice(5)] = val;
  }
  // 响应式数据
  if (isReactiveChangeAttr(attr) && utils.isFunction(value)) {
    reactivity.binding(() => assgin(value()));
  } else {
    assgin(value);
  }
}
/**
 * 创建节点片段
 * @param children
 * @returns
 */
function createElementFragment(children) {
  const fragment = document.createDocumentFragment();
  utils.customForEach(children, val => {
    if (utils.isFunction(val)) {
      reactivityNode(fragment, val); // 响应式数据挂载
    } else {
      nodeMount(fragment, val);
    }
  });
  return fragment;
}
/**
 * 节点挂载
 * @param el
 * @param val
 */
function nodeMount(el, val) {
  if (noRenderValue(val)) return;
  // 原始值
  if (isAssignmentValueToNode(val)) {
    const textNode = createTextNode(val);
    textNode.nodeValue = val;
    appendChild(el, textNode);
    return;
  }
  // 节点片段
  if (utils.isArray(val)) {
    const fragment = createElementFragment(val);
    appendChild(el, fragment);
    return;
  }
  // 节点
  if (isVirtualDomObject(val)) {
    const node = createElementReal(val.tag, val.attrs, val.children);
    appendChild(el, node);
    return;
  }
  // 组件
  if (utils.isObject(val) && isComponent(val.tag)) {
    const node = createElement(val.tag, val.attrs, val.children);
    appendChild(el, node);
    return;
  }
}
/**
 * 创建一个节点
 * @param value
 * @returns
 */
function createNode(value) {
  // 文本节点
  if (isAssignmentValueToNode(value)) {
    return createTextNode(value);
  }
  // 节点
  if (isVirtualDomObject(value)) {
    return createElement(value.tag, value.attrs, value.children);
  }
  // 组件
  if (utils.isObject(value) && isComponent(value.tag)) {
    return createElement(value.tag, value.attrs, value.children);
  }
}
/**
 * 查询备份数据中是否存在（二分）
 * @param arr
 * @param value
 * @returns
 */
function lookupBackupNodes(arr, value) {
  let start = 0;
  let end = utils.len(arr) - 1;
  while (start <= end) {
    const midden = Math.ceil((start + end) / 2);
    const val = arr[midden];
    if (value === val.key) {
      return midden;
    } else if (value < val.key) {
      // 在左边
      end = midden - 1;
    } else if (value > val.key) {
      // 在右边
      start = midden + 1;
    }
  }
  return -1;
}
/**
 * 响应式节点变化
 * @param fragment
 * @param func
 */
function reactivityNode(fragment, func) {
  let backupNodes = [];
  let lockFirstRun = true; // 锁：第一次运行
  let parent = null;
  const textNode = createTextNode(''); // 用于记录添加位置
  appendChild(fragment, textNode);
  reactivity.binding(() => {
    let value = func();
    if (value && utils.isObject(value) && isFragment(value.tag)) {
      return;
    }
    if (!utils.isArray(value)) value = [value];
    value = value.filter(val => !noRenderValue(val));
    let i = 0;
    while (i < utils.len(value)) {
      let val = value[i];
      const index = lookupBackupNodes(backupNodes, i);
      if (index >= 0) {
        // 节点已经存在
        if (utils.isEquals(val, backupNodes[index].tree)) {
          // 任何数据都没有变化
          i++;
          continue;
        }
        // 节点替换，重新备份
        const node = createNode(val);
        if (!node) {
          // 创建节点失败，有可能原节点被删除
          value.splice(index, 1);
          i++;
          continue;
        }
        const originTree = backupNodes[index].tree;
        isComponent(originTree.tag) && triggerBeforeUnmount(originTree.tag); // 组件卸载之前
        backupNodes[index].node.parentElement.replaceChild(node, backupNodes[index].node);
        if (isComponent(originTree.tag)) {
          // 组件卸载之后
          const comp = originTree.tag;
          triggerUnmounted(comp);
          compTreeMap.delete(comp);
        }
        backupNodes[index].tree = val;
        backupNodes[index].node = node;
      } else {
        // 节点不存在，追加节点
        const node = createNode(val);
        if (!node) {
          // 创建节点失败，有可能原节点被删除
          i++;
          continue;
        }
        if (lockFirstRun) {
          appendChild(fragment, node);
        } else if (utils.len(backupNodes) === 0) {
          parent ??= textNode.parentElement;
          parent.insertBefore(node, textNode.nextSibling);
        } else {
          const prevNode = backupNodes[utils.len(backupNodes) - 1].node;
          const lastNode = prevNode.nextSibling;
          prevNode.parentElement.insertBefore(node, lastNode);
        }
        backupNodes.push({
          key: i,
          tree: val,
          node
        });
      }
      i++;
    }
    // 检查有没有要删除的节点
    if (utils.len(backupNodes) > utils.len(value)) {
      for (let i = utils.len(value); i < utils.len(backupNodes); i++) {
        const originTree = backupNodes[i].tree;
        isComponent(originTree.tag) && triggerBeforeUnmount(originTree.tag); // 组件卸载之前
        backupNodes[i].node.remove();
        if (isComponent(originTree.tag)) {
          // 组件卸载之后
          const comp = originTree.tag;
          triggerUnmounted(comp);
          compTreeMap.delete(comp);
        }
      }
      backupNodes.splice(utils.len(value), utils.len(backupNodes) - utils.len(value));
    }
    lockFirstRun = false;
  });
}

/**
 * 创建 innerHTML，用于服务端渲染
 * @param tag
 * @param attrs
 * @param children
 */
function createHTML(tag, attrs = {}, children = ['']) {
  // 节点片段
  if (isFragment(tag)) {
    const props = utils.objectAssign(attrs, {
      children
    });
    const h = tag(props);
    return createHTMLFragment(h);
  }
  // 组件
  if (isComponent(tag)) {
    tag = tag;
    if (isClassComponent(tag)) {
      // @ts-ignore
      const t = new tag({
        ...attrs,
        children
      });
      return createHTML(t.render.bind(t));
    }
    const props = utils.objectAssign(attrs, {
      children
    });
    const h = tag(props);
    return createHTML(h.tag, h.attrs, h.children);
  }
  // 属性
  let attrStr = '';
  for (const attr in attrs) {
    if (attr.startsWith('on') || attr === 'ref') continue;
    let value = utils.isFunction(attrs[attr]) && isReactiveChangeAttr(attr) ? attrs[attr]() : attrs[attr];
    if (utils.isString(tag) && ['innerHTML', 'innerText'].includes(attr)) {
      children = [value];
      continue;
    }
    if (attr === 'className') {
      value && (attrStr += ` class="${joinClass(...[value].flat())}"`);
      continue;
    }
    // 对样式单独做下处理
    if (attr === 'style' && utils.isObject(value)) {
      for (const key in value) {
        if (utils.isFunction(value[key])) {
          // 响应式数据
          value[key] = value[key]();
        }
      }
      value = '"' + JSON.stringify(value).slice(1, -1).replace(/"/g, '').replace(/,/g, ';') + '"';
    }
    attrStr += ` ${attr}="${value}"`;
  }
  // 子节点
  const subNodeStr = createHTMLFragment(children);
  return `<${tag}${attrStr}>${subNodeStr}</${tag}>`;
}
/**
 * 创建 innerHTML 片段
 * @param children
 * @returns
 */
function createHTMLFragment(children) {
  let text = '';
  utils.customForEach(children, val => {
    // 原始值
    if (isAssignmentValueToNode(val)) {
      text += val.toString();
      return;
    }
    // 节点片段
    if (utils.isArray(val)) {
      text += createHTMLFragment(val);
      return;
    }
    // 响应式数据
    if (utils.isFunction(val)) {
      const value = val();
      text += createHTMLFragment([value]);
      return;
    }
    // 节点 || 组件 || 虚拟节点
    if (utils.isObject(val)) {
      text += createHTML(val.tag, val.attrs, val.children);
      return;
    }
  });
  return text;
}

/**
 * 服务端渲染函数
 * @param param0
 * @returns
 */
function renderToString({
  tag,
  attrs,
  children
}) {
  const html = createHTML(tag, attrs, children);
  return html;
}

exports.Fragment = Fragment;
exports.createElement = createElement;
exports.createElementFragment = createElementFragment;
exports.createHTML = createHTML;
exports.createHTMLFragment = createHTMLFragment;
exports.h = h;
exports.joinClass = joinClass;
exports.renderToString = renderToString;
