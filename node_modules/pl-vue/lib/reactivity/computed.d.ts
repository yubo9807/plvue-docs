import { ReactiveEffect } from './effect';
import { IS_READONLY, IS_REF } from './proxy';
type Getter<T> = () => T;
type Setter<T> = (val: T) => void;
export declare class ComputedRefImpl<T> {
    [IS_READONLY]: boolean;
    [IS_REF]: boolean;
    _cacheable: boolean;
    effect: ReactiveEffect<T>;
    _setter: Setter<T>;
    _value: T;
    _dirty: boolean;
    constructor(getter: Getter<T>, setter?: Setter<T>, dirty?: boolean);
    get value(): T;
    set value(val: T);
}
type ComputedOption<T> = Getter<T> | {
    get: Getter<T>;
    set: Setter<T>;
};
/**
 * 计算属性
 * @param option
 * @returns
 */
export declare function computed<T>(option: ComputedOption<T>): ComputedRefImpl<T>;
export {};
