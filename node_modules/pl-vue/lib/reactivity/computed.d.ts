import { ISREF } from "./ref";
import { ReactiveEffect } from './effect';
type Getter<T> = () => T;
type Setter<T> = (val: T) => void;
type ComputedOption<T> = Getter<T> | {
    get: Getter<T>;
    set: Setter<T>;
};
declare class ComputedRefImpl<T> {
    __v_isReadonly: boolean;
    [ISREF]: boolean;
    _cacheable: boolean;
    _dirty: boolean;
    computed: ReactiveEffect;
    _setter: Function;
    constructor(getter: Getter<T>, setter?: Setter<T>);
    get value(): T;
    set value(val: T);
}
/**
 * 计算属性
 * @param option
 * @returns
 */
export declare function computed<T>(option: ComputedOption<T>): ComputedRefImpl<T>;
export {};
