import { Key } from "../utils";
type BindingCallBack = (keys?: Set<Key>) => void | true;
/**
 * 绑定响应式对象
 * @param fn 将响应式对象写在 fn 内，该对象重新赋值时会自行触发 fn()
 * 当返回 true 时，该函数将在依赖收集中删除，避免占用过多的内存
 */
export declare function binding(fn: BindingCallBack): void;
export declare let currentKeys: Set<Key>;
/**
 * 依赖收集
 * @param source 存入 funcsMap 的键
 * @param key
 */
export declare function dependencyCollection(source: object, key: Key): void;
/**
 * 派发更新
 * @param source 存入 funcsMap 的键
 * @keys
 */
export declare function distributeUpdates(source: object, keys: Set<Key>): void;
/**
 * 回收依赖，清空当前已收集的依赖
 * @params sources ref 或 reactive 对象
 */
export declare function recycleDepend(...sources: object[]): void;
/**
 * 深度执行 收集依赖
 * @param target
 */
export declare function deepDependencyCollection(target: object): void;
/**
 * 强制触发数据更新
 * @param target
 */
export declare function triggerObject(target: object): void;
/**
 * 深度执行 派发更新
 * @param target
 */
export declare function deepTriggerObject(target: object): void;
export {};
