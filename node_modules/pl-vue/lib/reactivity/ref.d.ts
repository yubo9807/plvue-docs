import { AnyObj, Key } from "../utils";
export declare const ISREF = "__v_isRef";
declare class RefImpl<T> {
    [ISREF]: boolean;
    __v_isShallow: boolean;
    _rawValue: {
        value: T;
    };
    _value: T;
    getSignal: () => T;
    setSignal: (newValue: T) => void;
    constructor(value: T);
    get value(): T;
    set value(newValue: T);
}
export type Ref<T> = {
    value: T;
};
/**
 * 原始值转为响应式数据
 * @param value
 * @returns
 */
export declare function ref<T>(value?: T): RefImpl<T>;
/**
 * 判断对象是否为 ref
 * @note vue 实现这个函数有点low，随便定义一个对象就可以判断
 * @param ref
 */
export declare function isRef(ref: unknown): boolean;
/**
 * 返回 ref 内部值
 * @param ref
 * @returns
 */
export declare function unref<T>(ref: Ref<T>): T | Ref<T>;
declare class ObjectRefImpl {
    __v_isRef: boolean;
    _defaultValue: any;
    _key: Key;
    _object: AnyObj;
    constructor(target: AnyObj, key: Key, defaultValue?: any);
    get value(): any;
    set value(value: any);
}
/**
 * @param target
 * @param key
 * @param defaultValue
 * @returns
 */
export declare function toRef<T>(target: T, key: Key, defaultValue?: any): ObjectRefImpl;
/**
 * @param target
 * @returns
 */
export declare function toRefs<T>(target: T): AnyObj;
type CustomRefCallback = (track: Function, trigger: Function) => ({
    get: Function;
    set: Function;
});
declare class CustomRefImpl<T> extends RefImpl<T> {
    _get: Function;
    _set: Function;
    constructor(callback: CustomRefCallback);
    get value(): any;
    set value(val: any);
    /**
     * 设置 value，在合适的时间调用
     */
    setValue(): void;
}
/**
 * 自定义 Ref
 * @param callback
 * @returns
 */
export declare function customRef(callback: CustomRefCallback): CustomRefImpl<unknown>;
export {};
